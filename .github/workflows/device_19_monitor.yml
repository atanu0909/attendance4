name: Device 19 Attendance Monitor

on:
  schedule:
    # Run every 5 minutes during work hours (Monday-Friday, 6 AM to 11 PM IST)
    - cron: '*/5 0-17 * * 1-5'  # 6 AM to 11 PM IST = 0:30 AM to 17:30 PM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  monitor-attendance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyodbc pandas python-dotenv pymssql
        
    - name: Install SQL Server ODBC Driver (Ubuntu)
      run: |
        echo "Installing Microsoft ODBC drivers..."
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        
        # Install ODBC Driver 17 first (more stable)
        echo "Installing ODBC Driver 17..."
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 || echo "ODBC Driver 17 installation failed"
        
        # Try to install ODBC Driver 18 as well
        echo "Installing ODBC Driver 18..."
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 || echo "ODBC Driver 18 installation failed"
        
        # Install development tools
        sudo apt-get install -y unixodbc-dev
        
        # List installed drivers
        echo "Listing available ODBC drivers:"
        odbcinst -q -d
        
    - name: Test ODBC Drivers
      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        python test_odbc_drivers.py
        
    - name: Run Device 19 Attendance Monitor
      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        EMAIL_ENABLED: ${{ secrets.EMAIL_ENABLED }}
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
        COMPANY_NAME: ${{ secrets.COMPANY_NAME }}
        ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
      run: |
        python device_19_github_monitor.py
        
    - name: Upload logs as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-logs
        path: |
          *.log
          *.txt
        retention-days: 30
